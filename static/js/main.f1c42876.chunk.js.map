{"version":3,"sources":["App.js","index.js"],"names":["instance","axios","baseURL","Styles","styled","div","Table","columns","data","useTable","initialState","pageIndex","pageSize","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","JSON","stringify","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","className","onClick","disabled","length","type","defaultValue","onChange","e","target","value","Number","style","width","App","useState","setData","useEffect","get","then","res","console","log","items","React","useMemo","Header","accessor","ReactDOM","document","getElementById"],"mappings":"6MAKMA,EAAWC,SAAa,CAC5BC,QAAS,uEAULC,EAASC,IAAOC,IAAV,0aAoEZ,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACxB,EAkBIC,mBACF,CACEF,UACAC,OACAE,aAAc,CAAEC,UAAW,EAAGC,SAAS,KAEzCC,iBAvBAC,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,WACAC,EALF,EAKEA,KAIAC,EATF,EASEA,gBACAC,EAVF,EAUEA,YACAC,EAXF,EAWEA,YACAC,EAZF,EAYEA,UACAC,EAbF,EAaEA,SACAC,EAdF,EAcEA,SACAC,EAfF,EAeEA,aACAC,EAhBF,EAgBEA,YAhBF,IAiBEC,MAAShB,EAjBX,EAiBWA,UAAWC,EAjBtB,EAiBsBA,SAUtB,OACE,qCACE,8BACE,+BACGgB,KAAKC,UACJ,CACElB,YACAC,WACAU,YACAF,cACAD,mBAEF,KACA,OAIN,kDAAWL,KAAX,cACE,gCACGE,EAAac,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,8CAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,wBAKxD,iDAAWrB,KAAX,aACGG,EAAKY,KAAI,SAACO,EAAKC,GAEd,OADArB,EAAWoB,GAET,8CAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMV,KAAI,SAACW,GACd,OACE,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKL,OAAO,2BAaxD,sBAAKO,UAAU,aAAf,UACE,wBAAQC,QAAS,kBAAMrB,EAAS,IAAIsB,UAAW1B,EAA/C,SACG,OACO,IACV,wBAAQyB,QAAS,kBAAMnB,KAAgBoB,UAAW1B,EAAlD,SACG,MACO,IACV,wBAAQyB,QAAS,kBAAMpB,KAAYqB,UAAWzB,EAA9C,SACG,MACO,IACV,wBAAQwB,QAAS,kBAAMrB,EAASD,EAAY,IAAIuB,UAAWzB,EAA3D,SACG,OACO,IACV,wCACO,IACL,mCACGT,EAAY,EADf,OACsBU,EAAYyB,UACxB,OAEZ,iDACgB,IACd,uBACEC,KAAK,SACLC,aAAcrC,EAAY,EAC1BsC,SAAU,SAACC,GACT,IAAMhC,EAAOgC,EAAEC,OAAOC,MAAQC,OAAOH,EAAEC,OAAOC,OAAS,EAAI,EAC3D7B,EAASL,IAEXoC,MAAO,CAAEC,MAAO,cAEZ,IACR,wBACEH,MAAOxC,EACPqC,SAAU,SAACC,GACTxB,EAAY2B,OAAOH,EAAEC,OAAOC,SAHhC,SAMG,CAAC,GAAI,GAAI,IAAItB,KAAI,SAAClB,GAAD,OAChB,yBAAuBwC,MAAOxC,EAA9B,kBACQA,IADKA,cAiFV4C,MAxDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOjD,EAAP,KAAakD,EAAb,KACA,EAAkCD,mBAAS,GAA3C,6BAGAE,qBAAU,WACR3D,EAAS4D,IAAI,mCAAmCC,MAAK,SAACC,GACpDC,QAAQC,IAAIF,EAAItD,MAEhB,IAAMyD,EAAQH,EAAItD,KAAKyD,MACvBP,EAAQO,QAET,IAWH,IAAM1D,EAAU2D,IAAMC,SACpB,iBAAM,CACJ,CACEC,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,WACRC,SAAU,eAGd,IAKF,OACE,cAAClE,EAAD,UAEE,cAACG,EAAD,CAAOC,QAASA,EAASC,KAAMA,OC5QrC8D,IAASlC,OAAO,cAAC,EAAD,IAASmC,SAASC,eAAe,W","file":"static/js/main.f1c42876.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as axios from \"axios\";\nimport styled from \"styled-components\";\nimport { useTable, usePagination } from \"react-table\";\n\nconst instance = axios.create({\n  baseURL: \"https://cors-anywhere.herokuapp.com/https://mlb21.theshow.com/apis\",\n});\n\nconst corsURL =\n  \"https://cors-anywhere.herokuapp.com/https://mlb21.theshow.com/apis\";\n\nconst showURL = \"https://mlb21.theshow.com/apis\";\n\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n// getItems() {\n//     axios\n//       .get(\n//         \"https://cors-anywhere.herokuapp.com/https://mlb21.theshow.com/apis/items.json\"\n//       )\n//       .then((response) => {\n//         this.setState({\n//           rowData: response.data,\n//         });\n//         console.log(response.data);\n//         console.log(response.status);\n//         console.log(response.statusTest);\n//         console.log(response.headers);\n//       });\n//   }\n\n// getStadiums() {\n//   axios\n//     .get(\n//       \"https://cors-anywhere.herokuapp.com/https://mlb21.theshow.com/apis/items.json?type=stadium&page=1\"\n//     )\n//     .then((response) => {\n//       this.setState({\n//         rowData: response.data,\n//       });\n//       console.log(response.data);\n//       console.log(response.status);\n//       console.log(response.statusTest);\n//       console.log(response.headers);\n//     });\n// }\n\n// testData() {\n//   const exampleData = require(\"./data/sample.json\");\n\n//   this.setState({\n//     rowData: exampleData,\n//   });\n// }\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize:25 },\n    },\n    usePagination\n  );\n\n  return (\n    <>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              pageIndex,\n              pageSize,\n              pageCount,\n              canNextPage,\n              canPreviousPage,\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {/* \n    Pagination can be built however you'd like. \n    This is just a very basic UI implementation:\n  */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 25, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </>\n  );\n}\n\n// function getItems(url) {\n//   instance({\n//     'method':'GET',\n//     'url':'/items.json',\n//     'params': {\n//       'type':'stadium',\n//       'page':'1'\n//     },\n//   })\n//   .then((response) => {\n//     console.log(response);\n//     return response.data;\n//   }\n// }\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [pageCount, setPageCount] = useState(0);\n\n\n  useEffect(() => {\n    instance.get(\"/items.json?type=stadium&page=1\").then((res) => {\n      console.log(res.data);\n\n      const items = res.data.items; \n      setData(items);\n    });\n  }, []);\n\n  // const stadiums = require(\"./data/stadiums.json\");\n  // const data = React.useMemo(() => stadiums.items, [])\n\n  // const data = React.useMemo(\n  //   () =>\n  //   stadiums.items,\n  //   []\n  // )\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"UUID\",\n        accessor: \"uuid\",\n      },\n      {\n        Header: \"Team\",\n        accessor: \"team\",\n      },\n      {\n        Header: \"Capacity\",\n        accessor: \"capacity\",\n      },\n    ],\n    []\n  );\n\n  // const tableInstance = useTable({ columns, data })\n\n  return (\n    <Styles>\n      {/* <div className=\"App\"> */}\n      <Table columns={columns} data={data} />\n      {/* </div> */}\n    </Styles>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}